# Setup

esphome:
  name: silviaesp32
  platform: ESP32
  board: nodemcu-32s
  includes:
    - UartReadLineSensor.h

wifi:
  # Replace with your Wifi SSID:
  ssid: "emiladhoc"
  # Replace with your Wifi password:
  password: "coffeetime"
  power_save_mode: none

# Uncomment to assign a static IP if necessary:
#  manual_ip:
#    static_ip: x.x.x.x
#    gateway: x.x.x.x
#    subnet: 255.255.255.0

  ap:  # Enable fallback hotspot (captive portal) in case wifi connection fails
    ssid: "silviaesp32"
    password: "ineedhelp"

captive_portal:

# Enable logging
logger:
  level: VERBOSE #makes uart stream available in esphome logstream
  baud_rate: 0 #disable logging over uart

# Enable Home Assistant API
api:
  password: "coffeetime"

ota:
  password: "coffeetime"
  safe_mode: False
  num_attempts: 100

# Font
font:
  - file: "poppinsMedium.ttf"
    id: sys_font
    size: 20

# Inputs

switch:
  - platform: restart
    name: "Restart ESP"

  - platform: gpio
    pin: 33
    name: "Digital Out 33"

uart:
  id: uart_bus
  tx_pin: GPIO1
  rx_pin: GPIO3
  baud_rate: 500000

sensor:
  - platform: adc
    pin: 34
    attenuation: 11db
    name: "Pressure"
    id: pressure
    update_interval: 5s # change to Xs when finalizing
    unit_of_measurement: Bar
    filters:
      - multiply: 1 # May change depending on transducer/current adapter

text_sensor:
- platform: custom
  lambda: |-
    auto boiler_sensor = new boilerSensor(id(uart_bus));
    App.register_component(boiler_sensor);
    return {boiler_sensor};

  text_sensors:
    name: "boiler sensor"

- platform: custom
  lambda: |-
    auto group_sensor = new groupSensor(id(uart_bus));
    App.register_component(group_sensor);
    return {group_sensor};

  text_sensors:
    name: "group sensor"

# Outputs

i2c:
  sda: GPIO21
  scl: GPIO22

display:
  - platform: ssd1306_i2c # SSD1306 pinouts vary
    model: "SSD1306 128x64"
    #reset_pin: 0
    #address: 0x3c
    lambda: |-
      it.printf(0, 0, id(sys_font), "grams: %.01f", id(pressure).state);
      it.printf(0, 22, id(sys_font), "bar: %.01f", id(pressure).state);

output:
  - platform: ac_dimmer
    id: pump
    gate_pin: GPIO19
    zero_cross_pin:
      number: GPIO35
      mode: INPUT
      inverted: yes

light:
  - platform: monochromatic
    output: pump
    name: Phase Angle Pump